# This Action checks makes a dbt run to sample json structured logs
# and checks that they conform to the currently documented schema.
# 
# If this action fails it either means we have unintentionally deviated
# from our documented structured logging schema, or we need to bump the
# version of our structured logging and add new documentation to
# communicate these changes.


name: Structured Logging Schema Check
on:
  push:
    branches:
      - "main"
      - "*.latest"
      - "releases/*"
  pull_request:
  workflow_dispatch:

jobs:
  # run the performance measurements on the current or default branch
  test-schema:
    name: Test Log Schema
    runs-on: ubuntu-latest
    env:
      # turns warnings into errors
      RUSTFLAGS: "-D warnings"
      # points tests to the log file
      LOG_DIR: "/home/runner/work/dbt-core/dbt-core/logs"
      # tells integration tests to output into json format
      DBT_LOG_FORMAT: 'json'
    steps:

      - name: checkout dev
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.8"

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: install dbt
        run: pip install -r dev-requirements.txt -r editable-requirements.txt

      - name: Set up postgres
        uses: ./.github/actions/setup-postgres-linux

      - name: ls
        run: ls

      # integration tests generate a ton of logs in different files. the next step will find them all.
      # we actually care if these pass, because the normal test run doesn't usually include many json log outputs
      - name: Run integration tests
        # run: tox -e py38-postgres -- -nauto   <- TODO we can use this once json formatted integration tests no longer hang
        # small subset of integration tests that don't hang:
        run: python3 -m pytest test/integration/001_simple_copy_test test/integration/002_varchar_widening_test test/integration/003_simple_reference_test test/integration/004_simple_snapshot_test test/integration/005_simple_seed_test test/integration/006_simple_dependency_test test/integration/007_graph_selection_tests test/integration/008_schema_tests_test test/integration/009_data_tests_test test/integration/010_permission_tests test/integration/011_invalid_model_tests test/integration/012_deprecation_tests test/integration/013_context_var_tests test/integration/014_hook_tests test/integration/015_cli_invocation_tests test/integration/016_macro_tests test/integration/017_runtime_materialization_tests test/integration/018_adapter_ddl_tests test/integration/019_analysis_tests test/integration/020_ephemeral_test test/integration/021_concurrency_test test/integration/023_exit_codes_test test/integration/024_custom_schema_test test/integration/025_duplicate_model_test test/integration/025_timezones_test test/integration/026_aliases_test test/integration/027_cycle_test test/integration/028_cli_vars test/integration/029_docs_generate_tests test/integration/030_statement_test test/integration/031_thread_count_test test/integration/033_event_tracking_test test/integration/035_changing_relation_type_test test/integration/035_docs_blocks test/integration/037_external_reference_test test/integration/038_caching_test test/integration/039_config_test

      # apply our schema tests to every log event from the previous step
      # skips any output that isn't valid json
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path test/interop/log_parsing/Cargo.toml
