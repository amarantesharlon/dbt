syntax = "proto3";

package proto_types;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// Common event info
message EventInfo {
    string name = 1;
    string code = 2;
    string msg = 3;
    string level = 4;
    string invocation_id = 5;
    int32 pid = 6;
    string thread = 7;
    google.protobuf.Timestamp ts = 8;
    map<string, string> extra = 9;
    string category = 10;
}

// TimingInfo
message TimingInfoMsg {
    string name = 1;
    google.protobuf.Timestamp started_at = 2;
    google.protobuf.Timestamp completed_at = 3;
}

// NodeRelation
message NodeRelation {
    string database = 10;
    string schema = 11;
    string alias = 12;
    string relation_name = 13;
}

// NodeInfo
message NodeInfo {
    string node_path = 1;
    string node_name = 2;
    string unique_id = 3;
    string resource_type = 4;
    string materialized = 5;
    string node_status = 6;
    string node_started_at = 7;
    string node_finished_at = 8;
    google.protobuf.Struct meta = 9;
    NodeRelation node_relation = 10;
}

// GenericMessage, used for deserializing only
message GenericMessage {
    EventInfo info = 1;
}

// M - Deps generation

// M020
message RetryExternalCall {
    int32 attempt = 1;
    int32 max = 2;
}

message RetryExternalCallMsg {
    EventInfo info = 1;
    RetryExternalCall data = 2;
}

// M021
message RecordRetryException {
    string exc = 1;
}

message RecordRetryExceptionMsg {
    EventInfo info = 1;
    RecordRetryException data = 2;
}

// W - Node testing

// Skipped W001

// W002
message CatchableExceptionOnRun {
    NodeInfo node_info = 1;
    string exc = 2;
    string exc_info = 3;
}

message CatchableExceptionOnRunMsg {
    EventInfo info = 1;
    CatchableExceptionOnRun data = 2;
}

// W003
message InternalErrorOnRun {
    string build_path = 1;
    string exc = 2;
}

message InternalErrorOnRunMsg {
    EventInfo info = 1;
    InternalErrorOnRun data = 2;
}

// W004
message GenericExceptionOnRun {
    string build_path = 1;
    string unique_id = 2;
    string exc = 3;
}

message GenericExceptionOnRunMsg {
    EventInfo info = 1;
    GenericExceptionOnRun data = 2;
}

// W005
message NodeConnectionReleaseError {
    string node_name = 1;
    string exc = 2;
    string exc_info = 3;
}

message NodeConnectionReleaseErrorMsg {
    EventInfo info = 1;
    NodeConnectionReleaseError data = 2;
}

// W006
message FoundStats {
    string stat_line = 1;
}

message FoundStatsMsg {
    EventInfo info = 1;
    FoundStats data = 2;
}

// Z - Misc

// Z001
message MainKeyboardInterrupt {
}

message MainKeyboardInterruptMsg {
    EventInfo info = 1;
    MainKeyboardInterrupt data = 2;
}

// Z002
message MainEncounteredError {
    string exc = 1;
}

message MainEncounteredErrorMsg {
    EventInfo info = 1;
    MainEncounteredError data = 2;
}

// Z003
message MainStackTrace {
    string stack_trace = 1;
}

message MainStackTraceMsg {
    EventInfo info = 1;
    MainStackTrace data = 2;
}

// skipping Z004

// Z005
message SystemCouldNotWrite {
    string path = 1;
    string reason = 2;
    string exc = 3;
}

message SystemCouldNotWriteMsg {
    EventInfo info = 1;
    SystemCouldNotWrite data = 2;
}

// Z006
message SystemExecutingCmd {
    repeated string cmd = 1;
}

message SystemExecutingCmdMsg {
    EventInfo info = 1;
    SystemExecutingCmd data = 2;
}

// Z007
message SystemStdOut{
    string bmsg = 1;
}

message SystemStdOutMsg {
    EventInfo info = 1;
    SystemStdOut data = 2;
}

// Z008
message SystemStdErr {
    string bmsg = 1;
}

message SystemStdErrMsg {
    EventInfo info = 1;
    SystemStdErr data = 2;
}

// Z009
message SystemReportReturnCode {
    int32 returncode = 1;
}

message SystemReportReturnCodeMsg {
    EventInfo info = 1;
    SystemReportReturnCode data = 2;
}

// Z010
message TimingInfoCollected {
    NodeInfo node_info = 1;
    TimingInfoMsg timing_info = 2;
}

message TimingInfoCollectedMsg {
    EventInfo info = 1;
    TimingInfoCollected data = 2;
}

// Z011
message LogDebugStackTrace {
    string exc_info = 1;
}

message LogDebugStackTraceMsg {
    EventInfo info = 1;
    LogDebugStackTrace data = 2;
}

// Z012
message CheckCleanPath {
    string path = 1;
}

message CheckCleanPathMsg {
    EventInfo info = 1;
    CheckCleanPath data = 2;
}

// Z013
message ConfirmCleanPath {
    string path = 1;
}

message ConfirmCleanPathMsg {
    EventInfo info = 1;
    ConfirmCleanPath data = 2;
}

// Z014
message ProtectedCleanPath {
    string path = 1;
}

message ProtectedCleanPathMsg {
    EventInfo info = 1;
    ProtectedCleanPath data = 2;
}

// Z015
message FinishedCleanPaths {
}

message FinishedCleanPathsMsg {
    EventInfo info = 1;
    FinishedCleanPaths data = 2;
}

// Z016
message OpenCommand {
    string open_cmd = 1;
    string profiles_dir = 2;
}

message OpenCommandMsg {
    EventInfo info = 1;
    OpenCommand data = 2;
}

// Z017
message Formatting {
    string msg = 1;
}

message FormattingMsg {
    EventInfo info = 1;
    Formatting data = 2;
}

// Z018
message ServingDocsPort {
    string address = 1;
    int32 port = 2;
}

message ServingDocsPortMsg {
    EventInfo info = 1;
    ServingDocsPort data = 2;
}

// Z019
message ServingDocsAccessInfo {
    string port = 1;
}

message ServingDocsAccessInfoMsg {
    EventInfo info = 1;
    ServingDocsAccessInfo data = 2;
}

// Z020
message ServingDocsExitInfo {
}

message ServingDocsExitInfoMsg {
    EventInfo info = 1;
    ServingDocsExitInfo data = 2;
}

// Z021
message RunResultWarning {
    string resource_type = 1;
    string node_name = 2;
    string path = 3;
}

message RunResultWarningMsg {
    EventInfo info = 1;
    RunResultWarning data = 2;
}

// Z022
message RunResultFailure {
    string resource_type = 1;
    string node_name = 2;
    string path = 3;
}

message RunResultFailureMsg {
    EventInfo info = 1;
    RunResultFailure data = 2;
}

// Z023
message StatsLine {
    map<string, int32> stats = 1;
}

message StatsLineMsg {
    EventInfo info = 1;
    StatsLine data = 2;
}

// Z024
message RunResultError {
    string msg = 1;
}

message RunResultErrorMsg {
    EventInfo info = 1;
    RunResultError data = 2;
}

// Z025
message RunResultErrorNoMessage {
    string status = 1;
}

message RunResultErrorNoMessageMsg {
    EventInfo info = 1;
    RunResultErrorNoMessage data = 2;
}

// Z026
message SQLCompiledPath {
    string path = 1;
}

message SQLCompiledPathMsg {
    EventInfo info = 1;
    SQLCompiledPath data = 2;
}

// Z027
message CheckNodeTestFailure {
    string relation_name = 1;
}

message CheckNodeTestFailureMsg {
    EventInfo info = 1;
    CheckNodeTestFailure data = 2;
}

// Skipped Z028, Z029

// Z030
message EndOfRunSummary {
    int32 num_errors = 1;
    int32 num_warnings = 2;
    bool keyboard_interrupt = 3;
}

message EndOfRunSummaryMsg {
    EventInfo info = 1;
    EndOfRunSummary data = 2;
}

// Skipped Z031, Z032, Z033

// Z034
message LogSkipBecauseError {
    string schema = 1;
    string relation = 2;
    int32 index = 3;
    int32 total = 4;
}

message LogSkipBecauseErrorMsg {
    EventInfo info = 1;
    LogSkipBecauseError data = 2;
}

// Z036
message EnsureGitInstalled {
}

message EnsureGitInstalledMsg {
    EventInfo info = 1;
    EnsureGitInstalled data = 2;
}

// Z037
message DepsCreatingLocalSymlink {
}

message DepsCreatingLocalSymlinkMsg {
    EventInfo info = 1;
    DepsCreatingLocalSymlink data = 2;
}

// Z038
message DepsSymlinkNotAvailable {
}

message DepsSymlinkNotAvailableMsg {
    EventInfo info = 1;
    DepsSymlinkNotAvailable data = 2;
}

// Z039
message DisableTracking {
}

message DisableTrackingMsg {
    EventInfo info = 1;
    DisableTracking data = 2;
}

// Z040
message SendingEvent {
    string kwargs = 1;
}

message SendingEventMsg {
    EventInfo info = 1;
    SendingEvent data = 2;
}

// Z041
message SendEventFailure {
}

message SendEventFailureMsg {
    EventInfo info = 1;
    SendEventFailure data = 2;
}

// Z042
message FlushEvents {
}

message FlushEventsMsg {
    EventInfo info = 1;
    FlushEvents data = 2;
}

// Z043
message FlushEventsFailure {
}

message FlushEventsFailureMsg {
    EventInfo info = 1;
    FlushEventsFailure data = 2;
}

// Z044
message TrackingInitializeFailure {
    string exc_info = 1;
}

message TrackingInitializeFailureMsg {
    EventInfo info = 1;
    TrackingInitializeFailure data = 2;
}

// Skipped Z045

// Z046
message RunResultWarningMessage {
    string msg = 1;
}

message RunResultWarningMessageMsg {
    EventInfo info = 1;
    RunResultWarningMessage data = 2;
}

// Z047
message DebugCmdOut {
    string msg = 1;
}

message DebugCmdOutMsg {
    EventInfo info = 1;
    DebugCmdOut data = 2;
}

// Z048
message DebugCmdResult {
    string msg = 1;
}

message DebugCmdResultMsg {
    EventInfo info = 1;
    DebugCmdResult data = 2;
}

// Z049
message ListCmdOut {
    string msg = 1;
}

message ListCmdOutMsg {
    EventInfo info = 1;
    ListCmdOut data = 2;
}

// Z050
message Note {
    string msg = 1;
}

message NoteMsg {
    EventInfo info = 1;
    Note data = 2;
}

// Z051
message ResourceReport {
    string command_name = 2;
    bool command_success = 3;
    float command_wall_clock_time = 4;
    // The process_* metrics reflect the resource consumption of the process as
    // a whole when the command completes. When dbt is being used as a library,
    // these will reflect the resource consumption of the host process as a whole,
    // rather than the resources used exclusively by the command.
    float process_user_time = 5;
    float process_kernel_time = 6;
    int64 process_mem_max_rss = 7;
    int64 process_in_blocks = 8;
    int64 process_out_blocks = 9;
}

message ResourceReportMsg {
    EventInfo info = 1;
    ResourceReport data = 2;
}
